{
	"info": {
		"_postman_id": "8b9b48d5-ff82-4f17-9491-dfd6e9a0e7e5",
		"name": "ERGO CIAM Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20626077"
	},
	"item": [
		{
			"name": "CustomerPortal",
			"item": [
				{
					"name": "AuthN Enduser Zeropage",
					"item": [
						{
							"name": "tecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{tecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{tecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Login as technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/customerportal\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=consumer,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=customerportal,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});",
											"",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"realm\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"username\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"mail\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"givenName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"origin\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"_rev\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"objectClass\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"dn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"cn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"createTimestamp\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"uid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"universalid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"loginName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"etag\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"inetUserStatus\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"_id\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"sn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"realm\",",
											"    \"username\",",
											"    \"mail\",",
											"    \"givenName\",",
											"    \"origin\",",
											"    \"_rev\",",
											"    \"objectClass\",",
											"    \"dn\",",
											"    \"cn\",",
											"    \"createTimestamp\",",
											"    \"uid\",",
											"    \"universalid\",",
											"    \"loginName\",",
											"    \"etag\",",
											"    \"inetUserStatus\",",
											"    \"_id\",",
											"    \"sn\"",
											"  ]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUUID}}\",\n    \"loginName\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022!\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\":\"KuPo Automated Tests\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create a test user"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022!",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Test a successful login"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-wrongpassword",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Unauthorized Response with custom message 100\", function () {",
											"    pm.expect(jsonData.code).to.equal(401);",
											"    pm.expect(jsonData.reason).to.equal(\"Unauthorized\");",
											"    pm.expect(jsonData.message).to.equal(\"100\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo0815!",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Test login with wrong password"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-wrongpasspolicy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Unauthorized Response with custom message 101\", function () {",
											"    pm.expect(jsonData.code).to.equal(401);",
											"    pm.expect(jsonData.reason).to.equal(\"Unauthorized\");",
											"    pm.expect(jsonData.message).to.equal(\"101\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "pass",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Test login with password too small for password policy"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-wrongpasspolicy2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Unauthorized Response with custom message 101\", function () {",
											"    pm.expect(jsonData.code).to.equal(401);",
											"    pm.expect(jsonData.reason).to.equal(\"Unauthorized\");",
											"    pm.expect(jsonData.message).to.equal(\"101\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "passsssssssss",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Test login with password not matching all password policy criteria"
							},
							"response": []
						},
						{
							"name": "tecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{tecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{tecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Login with technical user"
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						}
					],
					"description": "Test if zeropage login (login via header) is working in general."
				},
				{
					"name": "AuthN Enduser Tree",
					"item": [
						{
							"name": "tecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{tecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{tecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/customerportal\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=consumer,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=customerportal,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});",
											"",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"realm\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"username\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"mail\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"givenName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"origin\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"_rev\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"objectClass\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"dn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"cn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"createTimestamp\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"uid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"universalid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"loginName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"etag\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"inetUserStatus\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"_id\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"sn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"realm\",",
											"    \"username\",",
											"    \"mail\",",
											"    \"givenName\",",
											"    \"origin\",",
											"    \"_rev\",",
											"    \"objectClass\",",
											"    \"dn\",",
											"    \"cn\",",
											"    \"createTimestamp\",",
											"    \"uid\",",
											"    \"universalid\",",
											"    \"loginName\",",
											"    \"etag\",",
											"    \"inetUserStatus\",",
											"    \"_id\",",
											"    \"sn\"",
											"  ]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUUID}}\",\n    \"loginName\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022!\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\":\"KuPo Automated Tests\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create test user"
							},
							"response": []
						},
						{
							"name": "Init",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"authId returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('authId');",
											"    pm.environment.set(\"signin-authid\", jsonData.authId);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Returns right callbacks\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.callbacks[0].type).to.eql(\"NameCallback\");",
											"    pm.expect(jsonData.callbacks[1].type).to.eql(\"PasswordCallback\");",
											"    pm.expect(jsonData.callbacks.length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Initialize tree to get callbacks"
							},
							"response": []
						},
						{
							"name": "Username-Password-enter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{signin-authid}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{testUserUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"Ergo2022!\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Enter username and password in callbacks"
							},
							"response": []
						},
						{
							"name": "tecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{tecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{tecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						}
					],
					"description": "Test if login using interactive tree is working"
				},
				{
					"name": "AuthN Enduser Lock User",
					"item": [
						{
							"name": "tecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{tecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{tecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/customerportal\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=consumer,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=customerportal,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});",
											"",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"realm\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"username\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"mail\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"givenName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"origin\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"_rev\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"objectClass\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"dn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"cn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"createTimestamp\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"uid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"universalid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"loginName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"etag\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"inetUserStatus\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"_id\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"sn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"realm\",",
											"    \"username\",",
											"    \"mail\",",
											"    \"givenName\",",
											"    \"origin\",",
											"    \"_rev\",",
											"    \"objectClass\",",
											"    \"dn\",",
											"    \"cn\",",
											"    \"createTimestamp\",",
											"    \"uid\",",
											"    \"universalid\",",
											"    \"loginName\",",
											"    \"etag\",",
											"    \"inetUserStatus\",",
											"    \"_id\",",
											"    \"sn\"",
											"  ]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUUID}}\",\n    \"loginName\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022!\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\":\"KuPo Automated Tests\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create test user"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022!",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Make sure test user can login"
							},
							"response": []
						},
						{
							"name": "tecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{tecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{tecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "lock-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/customerportal\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=consumer,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=customerportal,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Inactive\");",
											"    pm.expect(jsonData.accountLocked[0]).to.eql(\"true\");",
											"    pm.expect(jsonData.accountLockout[0]).to.eql(\"0\");",
											"});",
											"",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"_id\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"_rev\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"realm\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"username\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"accountLocked\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"mail\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"givenName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"origin\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"objectClass\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"dn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"cn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"accountLockout\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"createTimestamp\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"modifyTimestamp\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"uid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"universalid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"loginName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"etag\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"inetUserStatus\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"sn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"_id\",",
											"    \"_rev\",",
											"    \"realm\",",
											"    \"username\",",
											"    \"accountLocked\",",
											"    \"mail\",",
											"    \"givenName\",",
											"    \"origin\",",
											"    \"objectClass\",",
											"    \"dn\",",
											"    \"cn\",",
											"    \"accountLockout\",",
											"    \"createTimestamp\",",
											"    \"modifyTimestamp\",",
											"    \"uid\",",
											"    \"universalid\",",
											"    \"loginName\",",
											"    \"etag\",",
											"    \"inetUserStatus\",",
											"    \"sn\"",
											"  ]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "if-match",
										"value": "*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountLocked\":\"true\",\n    \"accountLockout\":\"0\",\n    \"inetUserStatus\":\"Inactive\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Lock test user"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-locked",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Unauthorized Response\", function () {",
											"    pm.expect(jsonData.code).to.equal(401);",
											"    pm.expect(jsonData.reason).to.equal(\"Unauthorized\");",
											"});",
											"",
											"//pm.test(\"Custom error message 201 (CIAM-158)\", function () {",
											"//    pm.expect(jsonData.message).to.equal(\"201\");",
											"//});",
											"pm.test(\"Default error message\", function () {",
											"    pm.expect(jsonData.message).to.equal(\"User Locked Out.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022!",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Verify test user cannot authenticate anymore and proper response is returned"
							},
							"response": []
						},
						{
							"name": "tecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{tecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{tecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "unlock-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/customerportal\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=consumer,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=customerportal,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"    pm.expect(jsonData.accountLocked[0]).to.eql(\"false\");",
											"    pm.expect(jsonData.accountLockout[0]).to.eql(\"0\");",
											"});",
											"",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"_id\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"_rev\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"realm\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"username\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"accountLocked\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"mail\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"givenName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"origin\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"objectClass\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"dn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"cn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"accountLockout\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"createTimestamp\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"modifyTimestamp\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"uid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"universalid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"loginName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"etag\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"inetUserStatus\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"sn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"_id\",",
											"    \"_rev\",",
											"    \"realm\",",
											"    \"username\",",
											"    \"accountLocked\",",
											"    \"mail\",",
											"    \"givenName\",",
											"    \"origin\",",
											"    \"objectClass\",",
											"    \"dn\",",
											"    \"cn\",",
											"    \"accountLockout\",",
											"    \"createTimestamp\",",
											"    \"modifyTimestamp\",",
											"    \"uid\",",
											"    \"universalid\",",
											"    \"loginName\",",
											"    \"etag\",",
											"    \"inetUserStatus\",",
											"    \"sn\"",
											"  ]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "if-match",
										"value": "*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountLocked\":\"false\",\n    \"accountLockout\":\"0\",\n    \"inetUserStatus\":\"Active\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Unlock test user"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-success-again",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022!",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Verify test user can login again"
							},
							"response": []
						},
						{
							"name": "tecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{tecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{tecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						}
					],
					"description": "Test if user can be locked and is not able to login after that. Same for unlocking."
				},
				{
					"name": "REST API Enduser",
					"item": [
						{
							"name": "tecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{tecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{tecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/customerportal\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=consumer,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=customerportal,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});",
											"",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"realm\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"username\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"mail\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"givenName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"origin\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"_rev\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"objectClass\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"dn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"cn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"createTimestamp\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"uid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"universalid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"loginName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"etag\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"inetUserStatus\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"_id\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"sn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"realm\",",
											"    \"username\",",
											"    \"mail\",",
											"    \"givenName\",",
											"    \"origin\",",
											"    \"_rev\",",
											"    \"objectClass\",",
											"    \"dn\",",
											"    \"cn\",",
											"    \"createTimestamp\",",
											"    \"uid\",",
											"    \"universalid\",",
											"    \"loginName\",",
											"    \"etag\",",
											"    \"inetUserStatus\",",
											"    \"_id\",",
											"    \"sn\"",
											"  ]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUUID}}\",\n    \"loginName\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022!\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\":\"KuPo Automated Tests\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create test user"
							},
							"response": []
						},
						{
							"name": "get-test-user-by-loginname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resultCount).to.eql(1);",
											"    pm.expect(jsonData.pagedResultsCookie).to.be.null;",
											"    pm.expect(jsonData.totalPagedResultsPolicy).to.eql(\"NONE\");",
											"    pm.expect(jsonData.totalPagedResults).to.eql(-1);",
											"    pm.expect(jsonData.remainingPagedResults).to.eql(0);",
											"    pm.expect(jsonData.result[0].realm).to.eql(\"/customerportal\");",
											"    pm.expect(jsonData.result[0].mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.result[0].username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.result[0].givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.result[0].sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.result[0].origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.result[0].dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=consumer,ou=identities\"));",
											"    pm.expect(jsonData.result[0].cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.result[0].uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.result[0].universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=customerportal,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.result[0].loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.result[0].inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CustomerPortal",
										"value": "Kz-Xl9QAWaVnDAXHURUrbP1beqM.*AAJTSQACMDIAAlNLABxHdVA1MFRKbERmbVU3MkFCL1cvYm0wcFJQeHc9AAR0eXBlAANDVFMAAlMxAAIwMQ..*",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users?_queryFilter=loginName eq \"{{testUserUsername}}\"",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users"
									],
									"query": [
										{
											"key": "_queryFilter",
											"value": "loginName eq \"{{testUserUsername}}\""
										}
									]
								},
								"description": "get test user by its loginName"
							},
							"response": []
						},
						{
							"name": "get-users-by-mail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resultCount).to.be.gte(1);",
											"    pm.expect(jsonData.pagedResultsCookie).to.be.null;",
											"    pm.expect(jsonData.totalPagedResultsPolicy).to.eql(\"NONE\");",
											"    pm.expect(jsonData.totalPagedResults).to.eql(-1);",
											"    pm.expect(jsonData.remainingPagedResults).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CustomerPortal",
										"value": "Kz-Xl9QAWaVnDAXHURUrbP1beqM.*AAJTSQACMDIAAlNLABxHdVA1MFRKbERmbVU3MkFCL1cvYm0wcFJQeHc9AAR0eXBlAANDVFMAAlMxAAIwMQ..*",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users?_queryFilter=mail%20co%20%22@icconsult.33mail.com%22",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users"
									],
									"query": [
										{
											"key": "_queryFilter",
											"value": "mail%20co%20%22@icconsult.33mail.com%22"
										}
									]
								},
								"description": "Get all users"
							},
							"response": []
						},
						{
							"name": "get-user-by-uuid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/customerportal\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=consumer,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=customerportal,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CustomerPortal",
										"value": "Kz-Xl9QAWaVnDAXHURUrbP1beqM.*AAJTSQACMDIAAlNLABxHdVA1MFRKbERmbVU3MkFCL1cvYm0wcFJQeHc9AAR0eXBlAANDVFMAAlMxAAIwMQ..*",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Get test user by its UUID"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022!",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Authenticate user"
							},
							"response": []
						},
						{
							"name": "get-own-user-by-uuid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// do not test request body if status is wrong",
											"if (pm.response.code == 200) {",
											"    var jsonData = pm.response.json();",
											"    var testAttributes = [",
											"        { name: \"realm\", value: \"/customerportal\" },",
											"        { name: \"mail\", value: pm.variables.replaceIn(\"{{testUserEmail}}\"), index: \"0\" },",
											"        { name: \"username\", value: pm.variables.replaceIn(\"{{testUserUUID}}\") },",
											"        { name: \"givenName\", value: \"Ergo\", index: \"0\" },",
											"        { name: \"sn\", value: \"User\", index: \"0\" },",
											"        { name: \"cn\", value: pm.variables.replaceIn(\"{{testUserUUID}}\"), index: \"0\" },",
											"        { name: \"uid\", value: pm.variables.replaceIn(\"{{testUserUUID}}\"), index: \"0\" },",
											"        { name: \"roles\", value: \"ui-self-service-user\", index: \"0\" },",
											"        ",
											"    ];",
											"    testAttributes.forEach(attr => {",
											"        pm.test(`Attribute '${attr.name}' has the expected value of: '${attr.value}'`, () => {",
											"            pm",
											"                .expect(attr.index ? jsonData[attr.name][attr.index] : jsonData[attr.name])",
											"                .to.eql(attr.value);",
											"        });",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Get own user by UUID"
							},
							"response": []
						},
						{
							"name": "tecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{tecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{tecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "update-hasOTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// do not test request body if status is wrong",
											"if (pm.response.code == 200) {",
											"    var jsonData = pm.response.json();",
											"    var testAttributes = [",
											"        { name: \"realm\", value: \"/customerportal\" },",
											"        { name: \"mail\", value: pm.variables.replaceIn(\"{{testUserEmail}}\"), index: \"0\" },",
											"        { name: \"username\", value: pm.variables.replaceIn(\"{{testUserUUID}}\") },",
											"        { name: \"givenName\", value: \"Ergo\", index: \"0\" },",
											"        { name: \"sn\", value: \"User\", index: \"0\" },",
											"        { name: \"origin\", value: \"KuPo Automated Tests\", index: \"0\" },",
											"        { name: \"dn\", value: pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=consumer,ou=identities\"), index: \"0\" },",
											"        { name: \"cn\", value: pm.variables.replaceIn(\"{{testUserUUID}}\"), index: \"0\" },",
											"        { name: \"uid\", value: pm.variables.replaceIn(\"{{testUserUUID}}\"), index: \"0\" },",
											"        { name: \"universalid\", value: pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=customerportal,ou=services,ou=am-config\"), index: \"0\" },",
											"        { name: \"loginName\", value: pm.variables.replaceIn(\"{{testUserUsername}}\"), index: \"0\" },",
											"        { name: \"myergo-hasOTPAccess\", value: \"true\", index: \"0\" },",
											"    ];",
											"    testAttributes.forEach(attr => {",
											"        pm.test(`Attribute '${attr.name}' has the expected value of: '${attr.value}`, () => {",
											"            pm",
											"                .expect(attr.index ? jsonData[attr.name][attr.index] : jsonData[attr.name])",
											"                .to.eql(attr.value);",
											"        });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0",
										"type": "text"
									},
									{
										"key": "if-match",
										"value": "*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"myergo-hasOTPAccess\":\"true\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										"{{testUserUUID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						},
						{
							"name": "get-user-by-uuid-after-deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(404);",
											"    pm.expect(jsonData.reason).to.eql(\"Not Found\");",
											"    pm.expect(jsonData.message).to.eql(\"Resource cannot be found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CustomerPortal",
										"value": "Kz-Xl9QAWaVnDAXHURUrbP1beqM.*AAJTSQACMDIAAlNLABxHdVA1MFRKbERmbVU3MkFCL1cvYm0wcFJQeHc9AAR0eXBlAANDVFMAAlMxAAIwMQ..*",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Try to get test user after deletion"
							},
							"response": []
						}
					],
					"description": "Test AM user REST APIs"
				},
				{
					"name": "OIDC",
					"item": [
						{
							"name": "OIDC-wellknown-endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"request_parameter_supported\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"introspection_signing_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"introspection_encryption_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"claims_parameter_supported\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"introspection_endpoint\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"check_session_iframe\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"scopes_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"backchannel_logout_supported\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"issuer\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"id_token_encryption_enc_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"acr_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"items\": {}",
											"      }",
											"    },",
											"    \"userinfo_encryption_enc_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"authorization_endpoint\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"request_object_encryption_enc_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"introspection_encryption_enc_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"rcs_request_encryption_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"claims_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"userinfo_signing_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"rcs_request_signing_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"token_endpoint_auth_methods_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"tls_client_certificate_bound_access_tokens\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"backchannel_logout_session_supported\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"token_endpoint\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"response_types_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"revocation_endpoint_auth_methods_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"request_uri_parameter_supported\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"rcs_response_encryption_enc_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"userinfo_encryption_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"grant_types_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"end_session_endpoint\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"rcs_request_encryption_enc_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"revocation_endpoint\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"version\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"rcs_response_encryption_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"userinfo_endpoint\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"token_endpoint_auth_signing_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"require_request_uri_registration\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"id_token_encryption_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"jwks_uri\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"subject_types_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"id_token_signing_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"registration_endpoint\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"request_object_signing_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"request_object_encryption_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"rcs_response_signing_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"request_parameter_supported\",",
											"    \"introspection_signing_alg_values_supported\",",
											"    \"introspection_encryption_alg_values_supported\",",
											"    \"claims_parameter_supported\",",
											"    \"introspection_endpoint\",",
											"    \"check_session_iframe\",",
											"    \"scopes_supported\",",
											"    \"backchannel_logout_supported\",",
											"    \"issuer\",",
											"    \"id_token_encryption_enc_values_supported\",",
											"    \"acr_values_supported\",",
											"    \"userinfo_encryption_enc_values_supported\",",
											"    \"authorization_endpoint\",",
											"    \"request_object_encryption_enc_values_supported\",",
											"    \"introspection_encryption_enc_values_supported\",",
											"    \"rcs_request_encryption_alg_values_supported\",",
											"    \"claims_supported\",",
											"    \"userinfo_signing_alg_values_supported\",",
											"    \"rcs_request_signing_alg_values_supported\",",
											"    \"token_endpoint_auth_methods_supported\",",
											"    \"tls_client_certificate_bound_access_tokens\",",
											"    \"backchannel_logout_session_supported\",",
											"    \"token_endpoint\",",
											"    \"response_types_supported\",",
											"    \"revocation_endpoint_auth_methods_supported\",",
											"    \"request_uri_parameter_supported\",",
											"    \"rcs_response_encryption_enc_values_supported\",",
											"    \"userinfo_encryption_alg_values_supported\",",
											"    \"grant_types_supported\",",
											"    \"end_session_endpoint\",",
											"    \"rcs_request_encryption_enc_values_supported\",",
											"    \"revocation_endpoint\",",
											"    \"version\",",
											"    \"rcs_response_encryption_alg_values_supported\",",
											"    \"userinfo_endpoint\",",
											"    \"token_endpoint_auth_signing_alg_values_supported\",",
											"    \"require_request_uri_registration\",",
											"    \"id_token_encryption_alg_values_supported\",",
											"    \"jwks_uri\",",
											"    \"subject_types_supported\",",
											"    \"id_token_signing_alg_values_supported\",",
											"    \"registration_endpoint\",",
											"    \"request_object_signing_alg_values_supported\",",
											"    \"request_object_encryption_alg_values_supported\",",
											"    \"rcs_response_signing_alg_values_supported\"",
											"  ]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/am/oauth2/realms/root/realms/customerportal/.well-known/openid-configuration",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"customerportal",
										".well-known",
										"openid-configuration"
									]
								},
								"description": "Get OIDC configuration"
							},
							"response": []
						},
						{
							"name": "JWK-uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"At least one key available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.keys.length).to.be.gte(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/am/oauth2/realms/root/realms/customerportal/connect/jwk_uri",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"customerportal",
										"connect",
										"jwk_uri"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "OAuth2 Login",
					"item": [
						{
							"name": "tecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{tecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{tecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Login as technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/customerportal\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=consumer,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=customerportal,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});",
											"",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"realm\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"username\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"mail\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"givenName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"origin\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"_rev\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"objectClass\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"dn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"cn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"createTimestamp\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"uid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"universalid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"loginName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"etag\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"inetUserStatus\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"_id\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"sn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"realm\",",
											"    \"username\",",
											"    \"mail\",",
											"    \"givenName\",",
											"    \"origin\",",
											"    \"_rev\",",
											"    \"objectClass\",",
											"    \"dn\",",
											"    \"cn\",",
											"    \"createTimestamp\",",
											"    \"uid\",",
											"    \"universalid\",",
											"    \"loginName\",",
											"    \"etag\",",
											"    \"inetUserStatus\",",
											"    \"_id\",",
											"    \"sn\"",
											"  ]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUUID}}\",\n    \"loginName\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022!\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\":\"KuPo Automated Tests\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create a test user"
							},
							"response": []
						},
						{
							"name": "password-grant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"function jwt_decode(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[1]));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has access token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.access_token).to.be.not.empty;",
											"});",
											"",
											"pm.test(\"Has openid and profile scope\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scope).to.contain(\"openid\");",
											"    pm.expect(jsonData.scope).to.contain(\"profile\");",
											"});",
											"",
											"pm.test(\"id-token issuer is matching\", function () {",
											"    pm.expect(jwt_decode(pm.response.json().id_token).iss).to.be.eql(pm.environment.get(\"url\") + \":443/am/oauth2/realms/root/realms/customerportal\");",
											"});",
											"",
											"pm.test(\"id-token audience is correct\", function () {",
											"    pm.expect(jwt_decode(pm.response.json().id_token).aud).to.be.eql(pm.environment.get(\"customerportal_oauth2_clientid\"));",
											"});",
											"",
											"pm.test(\"id-token sub and loginname are right\", function () {",
											"    pm.expect(jwt_decode(pm.response.json().id_token).sub).to.be.eql(pm.variables.get(\"testUserUUID\"));",
											"    pm.expect(jwt_decode(pm.response.json().id_token).loginName).to.be.eql(pm.variables.get(\"testUserUsername\"));",
											"});",
											"",
											"pm.environment.set(\"access_token\", pm.response.json().access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{customerportal_oauth2_clientsecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{customerportal_oauth2_clientid}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{testUserUsername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Ergo2022!",
											"type": "text"
										},
										{
											"key": "realm",
											"value": "customerportal",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid profile",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/am/oauth2/realms/root/realms/customerportal/access_token",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"customerportal",
										"access_token"
									]
								},
								"description": "Get access token using password grant"
							},
							"response": []
						},
						{
							"name": "token-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Valid token response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.token_type).to.eql(\"Bearer\");",
											"    pm.expect(jsonData.client_id).to.eql(pm.environment.get(\"customerportal_oauth2_clientid\"));",
											"    pm.expect(jsonData.access_token).to.eql(pm.environment.get(\"access_token\"));",
											"    pm.expect(jsonData.grant_type).to.eql(\"password\");",
											"    pm.expect(jsonData.scope.length).to.eql(2);",
											"    pm.expect(jsonData.scope).to.contain(\"openid\");",
											"    pm.expect(jsonData.scope).to.contain(\"profile\");",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"    pm.expect(jsonData.expires_in).to.be.lte(3600);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/am/oauth2/realms/root/realms/customerportal/tokeninfo?access_token={{access_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"customerportal",
										"tokeninfo"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{access_token}}"
										}
									]
								},
								"description": "Retrieve token info"
							},
							"response": []
						},
						{
							"name": "user-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.loginName).to.eql(pm.variables.get(\"testUserUsername\"));",
											"    pm.expect(jsonData.sub).to.eql(pm.variables.get(\"testUserUUID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/am/oauth2/realms/root/realms/customerportal/userinfo",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"customerportal",
										"userinfo"
									]
								},
								"description": "retrieve user info"
							},
							"response": []
						},
						{
							"name": "token-introspection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Token is active\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{customerportal_oauth2_clientid}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{customerportal_oauth2_clientsecret}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/am/oauth2/realms/root/realms/customerportal/introspect",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"customerportal",
										"introspect"
									]
								},
								"description": "Perform a token introspection"
							},
							"response": []
						},
						{
							"name": "revoke-token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{customerportal_oauth2_clientid}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{customerportal_oauth2_clientsecret}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/am/oauth2/realms/root/realms/customerportal/token/revoke",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"customerportal",
										"token",
										"revoke"
									]
								},
								"description": "Revoke the token"
							},
							"response": []
						},
						{
							"name": "token-introspection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Token is active\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{customerportal_oauth2_clientid}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{customerportal_oauth2_clientsecret}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/am/oauth2/realms/root/realms/customerportal/introspect",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"customerportal",
										"introspect"
									]
								},
								"description": "Perform another token introspection to check if token is inactive now"
							},
							"response": []
						},
						{
							"name": "tecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{tecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{tecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Login with technical user"
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						}
					],
					"description": "Get a token and check some APIs around the token"
				},
				{
					"name": "Policy",
					"item": [
						{
							"name": "tecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{tecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{tecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Login as technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/customerportal\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=consumer,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=customerportal,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});",
											"",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"realm\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"username\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"mail\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"givenName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"origin\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"_rev\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"objectClass\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"dn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"cn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"createTimestamp\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"uid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"universalid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"loginName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"etag\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"inetUserStatus\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"_id\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"sn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"realm\",",
											"    \"username\",",
											"    \"mail\",",
											"    \"givenName\",",
											"    \"origin\",",
											"    \"_rev\",",
											"    \"objectClass\",",
											"    \"dn\",",
											"    \"cn\",",
											"    \"createTimestamp\",",
											"    \"uid\",",
											"    \"universalid\",",
											"    \"loginName\",",
											"    \"etag\",",
											"    \"inetUserStatus\",",
											"    \"_id\",",
											"    \"sn\"",
											"  ]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUUID}}\",\n    \"loginName\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022!\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\":\"KuPo Automated Tests\",\n    \"myergo-hasOTPAccess\":\"true\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create a test user"
							},
							"response": []
						},
						{
							"name": "test-user-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"    pm.environment.set(\"testuserSSOToken\", jsonData.tokenId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022!",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Test a successful login"
							},
							"response": []
						},
						{
							"name": "agent-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(`cookies for ${url} cleared!`);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "ErgoWebAgent20220620",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{agent_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate?authIndexType=module&authIndexValue=Application",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "module"
										},
										{
											"key": "authIndexValue",
											"value": "Application"
										}
									]
								},
								"description": "Login as technical user"
							},
							"response": []
						},
						{
							"name": "Evaluate Policy L1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"GET allowed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].actions.GET).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resources\":[\n        \"https://{{customerportalfqdn}}:443/meineversicherungen/l1/test\"\n    ],\n    \"subject\":{\n        \"ssoToken\": \"{{testuserSSOToken}}\"\n    },\n    \"application\":\"iPlanetAMWebAgentService\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/policies?_action=evaluate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"policies"
									],
									"query": [
										{
											"key": "_action",
											"value": "evaluate"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Evaluate Policy HT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"GET allowed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].actions.GET).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resources\":[\n        \"https://{{customerportalfqdn}}:443/meineversicherungen-ht/test\"\n    ],\n    \"subject\":{\n        \"ssoToken\": \"{{testuserSSOToken}}\"\n    },\n    \"application\":\"iPlanetAMWebAgentService\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/policies?_action=evaluate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"policies"
									],
									"query": [
										{
											"key": "_action",
											"value": "evaluate"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "tecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{tecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{tecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Login as technical user"
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						}
					]
				},
				{
					"name": "Security Headers",
					"item": [
						{
							"name": "AM Header Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HSTS header is present\", function () {",
											"    pm.response.to.have.header(\"Strict-Transport-Security\");",
											"});",
											"pm.test(\"HSTS header has recommended value\", function () {",
											"    pm.response.to.have.header(\"Strict-Transport-Security\", \"max-age=63072000; includeSubDomains; preload\");",
											"});",
											"pm.test(\"CSP header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Security-Policy\");",
											"});",
											"pm.test(\"CSP header has recommended value\", function () {",
											"    var csp = pm.response.headers.get(\"Content-Security-Policy\");",
											"    pm.expect(csp).to.contain(\"default-src 'self'\");",
											"    pm.expect(csp).to.contain(\"frame-ancestors 'none'\");",
											"});",
											"pm.test(\"X-Frame-Options header is present\", function () {",
											"    pm.response.to.have.header(\"X-Frame-Options\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login UI Header Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HSTS header is present\", function () {",
											"    pm.response.to.have.header(\"Strict-Transport-Security\");",
											"});",
											"pm.test(\"HSTS header has recommended value\", function () {",
											"    pm.response.to.have.header(\"Strict-Transport-Security\", \"max-age=63072000; includeSubDomains; preload\");",
											"});",
											"pm.test(\"CSP header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Security-Policy\");",
											"});",
											"pm.test(\"CSP header has recommended value\", function () {",
											"    var csp = pm.response.headers.get(\"Content-Security-Policy\");",
											"    pm.expect(csp).to.contain(\"default-src 'self' 'unsafe-eval'\");",
											"    pm.expect(csp).to.contain(\"frame-ancestors 'none'\");",
											"});",
											"pm.test(\"X-Frame-Options header is present\", function () {",
											"    pm.response.to.have.header(\"X-Frame-Options\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/login/",
									"host": [
										"{{url}}"
									],
									"path": [
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "AM CORS Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"CORS is not allowed\", function () {",
											"    pm.response.to.not.have.header(\"Access-Control-Allow-Origin\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "https://evilsite.com",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "CP_OneClickInsurance",
			"item": [
				{
					"name": "REST API Enduser",
					"item": [
						{
							"name": "tecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{tecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{tecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/customerportal\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=consumer,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=customerportal,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});",
											"",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"realm\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"username\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"mail\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"givenName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"origin\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"_rev\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"objectClass\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"dn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"cn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"createTimestamp\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"uid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"universalid\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"loginName\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"etag\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"inetUserStatus\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"_id\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"sn\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"realm\",",
											"    \"username\",",
											"    \"mail\",",
											"    \"givenName\",",
											"    \"origin\",",
											"    \"_rev\",",
											"    \"objectClass\",",
											"    \"dn\",",
											"    \"cn\",",
											"    \"createTimestamp\",",
											"    \"uid\",",
											"    \"universalid\",",
											"    \"loginName\",",
											"    \"etag\",",
											"    \"inetUserStatus\",",
											"    \"_id\",",
											"    \"sn\"",
											"  ]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUUID}}\",\n    \"loginName\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022!\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\":\"KuPo Automated Tests\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create test user"
							},
							"response": []
						},
						{
							"name": "oicuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{ociuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{ociuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "get-test-user-by-loginname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resultCount).to.eql(1);",
											"    pm.expect(jsonData.pagedResultsCookie).to.be.null;",
											"    pm.expect(jsonData.totalPagedResultsPolicy).to.eql(\"NONE\");",
											"    pm.expect(jsonData.totalPagedResults).to.eql(-1);",
											"    pm.expect(jsonData.remainingPagedResults).to.eql(0);",
											"    pm.expect(jsonData.result[0].realm).to.eql(\"/customerportal\");",
											"    pm.expect(jsonData.result[0].mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.result[0].username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.result[0].givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.result[0].sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.result[0].origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.result[0].dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=consumer,ou=identities\"));",
											"    pm.expect(jsonData.result[0].cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.result[0].uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.result[0].universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=customerportal,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.result[0].loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.result[0].inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users?_queryFilter=loginName eq \"{{testUserUsername}}\"",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users"
									],
									"query": [
										{
											"key": "_queryFilter",
											"value": "loginName eq \"{{testUserUsername}}\""
										}
									]
								},
								"description": "get test user by its loginName"
							},
							"response": []
						},
						{
							"name": "get-user-by-uuid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/customerportal\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=consumer,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=customerportal,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Get test user by its UUID"
							},
							"response": []
						},
						{
							"name": "tecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/customerportal\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{tecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{tecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/customerportal/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"customerportal",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						}
					],
					"description": "Test AM user REST APIs"
				}
			]
		},
		{
			"name": "EMS",
			"item": [
				{
					"name": "AuthN Enduser Zeropage",
					"item": [
						{
							"name": "emstecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{emstecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{emstecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Login as technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/ems\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=ems,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=ems,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUUID}}\",\n    \"loginName\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022#.#.\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\": \"Automated Test\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create a test user"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022#.#.",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Test a successful login"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-wrongpassword",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Unauthorized Response\", function () {",
											"    pm.expect(jsonData.code).to.equal(401);",
											"    pm.expect(jsonData.reason).to.equal(\"Unauthorized\");",
											"    pm.expect(jsonData.message).to.equal(\"Authentication Failed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo0815!",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Test login with wrong password"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-wrongpasspolicy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Unauthorized Response\", function () {",
											"    pm.expect(jsonData.code).to.equal(401);",
											"    pm.expect(jsonData.reason).to.equal(\"Unauthorized\");",
											"    pm.expect(jsonData.message).to.equal(\"Authentication Failed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "pass",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Test login with password too small for password policy"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-wrongpasspolicy2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Unauthorized Response\", function () {",
											"    pm.expect(jsonData.code).to.equal(401);",
											"    pm.expect(jsonData.reason).to.equal(\"Unauthorized\");",
											"    pm.expect(jsonData.message).to.equal(\"Authentication Failed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "passsssssssss",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Test login with password not matching all password policy criteria"
							},
							"response": []
						},
						{
							"name": "emstecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{emstecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{emstecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Login with technical user"
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						}
					],
					"description": "Test if zeropage login (login via header) is working in general."
				},
				{
					"name": "AuthN Enduser Tree",
					"item": [
						{
							"name": "emstecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{emstecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{emstecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/ems\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=ems,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=ems,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUUID}}\",\n    \"loginName\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022#.#.\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\": \"Automated Test\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create a test user"
							},
							"response": []
						},
						{
							"name": "Init",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"authId returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('authId');",
											"    pm.environment.set(\"signin-authid\", jsonData.authId);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Returns right callbacks\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.callbacks[0].type).to.eql(\"NameCallback\");",
											"    pm.expect(jsonData.callbacks[1].type).to.eql(\"PasswordCallback\");",
											"    pm.expect(jsonData.callbacks.length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Initialize tree to get callbacks"
							},
							"response": []
						},
						{
							"name": "Username-Password-enter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{signin-authid}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{testUserUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"Ergo2022#.#.\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Enter username and password in callbacks"
							},
							"response": []
						},
						{
							"name": "emstecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{emstecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{emstecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						}
					],
					"description": "Test if login using interactive tree is working"
				},
				{
					"name": "AuthN Enduser Lock User",
					"item": [
						{
							"name": "emstecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{emstecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{emstecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/ems\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=ems,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=ems,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUUID}}\",\n    \"loginName\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022#.#.\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\": \"Automated Test\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create a test user"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022#.#.",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Make sure test user can login"
							},
							"response": []
						},
						{
							"name": "emstecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{emstecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{emstecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "lock-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/ems\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"Automated Test\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=ems,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=ems,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Inactive\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "if-match",
										"value": "*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountLocked\":\"true\",\n    \"accountLockout\":\"0\",\n    \"inetUserStatus\":\"Inactive\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Lock test user"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-locked",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Unauthorized Response\", function () {",
											"    pm.expect(jsonData.code).to.equal(401);",
											"    pm.expect(jsonData.reason).to.equal(\"Unauthorized\");",
											"    pm.expect(jsonData.message).to.equal(\"Your account has been locked.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022#.#.",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Verify test user cannot authenticate anymore and proper response is returned"
							},
							"response": []
						},
						{
							"name": "emstecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{emstecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{emstecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "unlock-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/ems\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"Automated Test\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=ems,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=ems,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "if-match",
										"value": "*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountLocked\":\"false\",\n    \"accountLockout\":\"0\",\n    \"inetUserStatus\":\"Active\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Unlock test user"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-success-again",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022#.#.",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Verify test user can login again"
							},
							"response": []
						},
						{
							"name": "emstecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{emstecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{emstecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						}
					],
					"description": "Test if user can be locked and is not able to login after that. Same for unlocking."
				},
				{
					"name": "REST API Enduser",
					"item": [
						{
							"name": "emstecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{emstecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{emstecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/ems\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=ems,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=ems,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUUID}}\",\n    \"loginName\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022#.#.\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\": \"Automated Test\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create a test user"
							},
							"response": []
						},
						{
							"name": "get-test-user-by-loginname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resultCount).to.eql(1);",
											"    pm.expect(jsonData.pagedResultsCookie).to.be.null;",
											"    pm.expect(jsonData.totalPagedResultsPolicy).to.eql(\"NONE\");",
											"    pm.expect(jsonData.totalPagedResults).to.eql(-1);",
											"    pm.expect(jsonData.remainingPagedResults).to.eql(0);",
											"    pm.expect(jsonData.result[0].realm).to.eql(\"/ems\");",
											"    pm.expect(jsonData.result[0].mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.result[0].username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.result[0].givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.result[0].sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.result[0].origin[0]).to.eql(\"Automated Test\");",
											"    pm.expect(jsonData.result[0].dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=ems,ou=identities\"));",
											"    pm.expect(jsonData.result[0].cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.result[0].uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.result[0].universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=ems,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.result[0].loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.result[0].inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "ems",
										"value": "Kz-Xl9QAWaVnDAXHURUrbP1beqM.*AAJTSQACMDIAAlNLABxHdVA1MFRKbERmbVU3MkFCL1cvYm0wcFJQeHc9AAR0eXBlAANDVFMAAlMxAAIwMQ..*",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users?_queryFilter=loginName eq \"{{testUserUsername}}\"",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users"
									],
									"query": [
										{
											"key": "_queryFilter",
											"value": "loginName eq \"{{testUserUsername}}\""
										}
									]
								},
								"description": "get test user by its loginName"
							},
							"response": []
						},
						{
							"name": "get-users-by-mail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resultCount).to.be.gte(1);",
											"    pm.expect(jsonData.pagedResultsCookie).to.be.null;",
											"    pm.expect(jsonData.totalPagedResultsPolicy).to.eql(\"NONE\");",
											"    pm.expect(jsonData.totalPagedResults).to.eql(-1);",
											"    pm.expect(jsonData.remainingPagedResults).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "ems",
										"value": "Kz-Xl9QAWaVnDAXHURUrbP1beqM.*AAJTSQACMDIAAlNLABxHdVA1MFRKbERmbVU3MkFCL1cvYm0wcFJQeHc9AAR0eXBlAANDVFMAAlMxAAIwMQ..*",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users?_queryFilter=mail%20co%20%22@icconsult.33mail.com%22",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users"
									],
									"query": [
										{
											"key": "_queryFilter",
											"value": "mail%20co%20%22@icconsult.33mail.com%22"
										}
									]
								},
								"description": "Get all users"
							},
							"response": []
						},
						{
							"name": "get-user-by-uuid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/ems\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"Automated Test\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=ems,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=ems,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "ems",
										"value": "Kz-Xl9QAWaVnDAXHURUrbP1beqM.*AAJTSQACMDIAAlNLABxHdVA1MFRKbERmbVU3MkFCL1cvYm0wcFJQeHc9AAR0eXBlAANDVFMAAlMxAAIwMQ..*",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Get test user by its UUID"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022#.#.",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Authenticate user"
							},
							"response": []
						},
						{
							"name": "get-own-user-by-uuid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/ems\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.roles[0]).to.eql(\"ui-self-service-user\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "ems",
										"value": "Kz-Xl9QAWaVnDAXHURUrbP1beqM.*AAJTSQACMDIAAlNLABxHdVA1MFRKbERmbVU3MkFCL1cvYm0wcFJQeHc9AAR0eXBlAANDVFMAAlMxAAIwMQ..*",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Get own user by UUID"
							},
							"response": []
						},
						{
							"name": "emstecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{emstecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{emstecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						},
						{
							"name": "get-user-by-uuid-after-deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(404);",
											"    pm.expect(jsonData.reason).to.eql(\"Not Found\");",
											"    pm.expect(jsonData.message).to.eql(\"Resource cannot be found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "ems",
										"value": "Kz-Xl9QAWaVnDAXHURUrbP1beqM.*AAJTSQACMDIAAlNLABxHdVA1MFRKbERmbVU3MkFCL1cvYm0wcFJQeHc9AAR0eXBlAANDVFMAAlMxAAIwMQ..*",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Try to get test user after deletion"
							},
							"response": []
						}
					],
					"description": "Test AM user REST APIs"
				},
				{
					"name": "REST API Password Policy (CIAM-418)",
					"item": [
						{
							"name": "emstecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{emstecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{emstecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/ems\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"uid={{testUserUUID}},ou=users,ou=ems,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.uid[0]).to.eql(pm.variables.replaceIn(\"{{testUserUUID}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUUID}},ou=user,o=ems,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUUID}}\",\n    \"loginName\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022#.#.\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\": \"Automated Test\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create a test user"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022#.#.",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Make sure test user can login"
							},
							"response": []
						},
						{
							"name": "change-password-insufficient-complexity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Password Policy does not match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.reason).to.eql(\"Bad Request\");",
											"    pm.expect(jsonData.message).to.eql(\"The password did not meet the password policy requirements.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"Ergo2022#.#.\",\n    \"userpassword\":\"NoNumberInHere\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password to invalid length"
							},
							"response": []
						},
						{
							"name": "change-password-insufficient-length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Password Policy does not match\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.reason).to.eql(\"Bad Request\");",
											"    pm.expect(jsonData.message).to.eql(\"The password did not meet the password policy requirements.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"Ergo2022#.#.\",\n    \"userpassword\":\"sm4llPW\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password to invalid complexity"
							},
							"response": []
						},
						{
							"name": "change-password-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"Ergo2022#.#.\",\n    \"userpassword\":\"NewPassword1\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password"
							},
							"response": []
						},
						{
							"name": "change-password-2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"NewPassword1\",\n    \"userpassword\":\"NewPassword2\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password again"
							},
							"response": []
						},
						{
							"name": "change-password-3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"NewPassword2\",\n    \"userpassword\":\"NewPassword3\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password again"
							},
							"response": []
						},
						{
							"name": "change-password-1-fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Password History blocks\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.reason).to.eql(\"Bad Request\");",
											"    pm.expect(jsonData.message).to.eql(\"New password has been used previously.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"NewPassword3\",\n    \"userpassword\":\"NewPassword1\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Try to change password to sth in history"
							},
							"response": []
						},
						{
							"name": "change-password-4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"NewPassword3\",\n    \"userpassword\":\"NewPassword4\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password again"
							},
							"response": []
						},
						{
							"name": "change-password-5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"NewPassword4\",\n    \"userpassword\":\"NewPassword5\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password again"
							},
							"response": []
						},
						{
							"name": "change-password-6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"NewPassword5\",\n    \"userpassword\":\"NewPassword6\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password again"
							},
							"response": []
						},
						{
							"name": "change-password-7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"NewPassword6\",\n    \"userpassword\":\"NewPassword7\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password again"
							},
							"response": []
						},
						{
							"name": "change-password-8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"NewPassword7\",\n    \"userpassword\":\"NewPassword8\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password again"
							},
							"response": []
						},
						{
							"name": "change-password-9",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"NewPassword8\",\n    \"userpassword\":\"NewPassword9\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password again"
							},
							"response": []
						},
						{
							"name": "change-password-10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"NewPassword9\",\n    \"userpassword\":\"NewPassword10\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password again"
							},
							"response": []
						},
						{
							"name": "change-password-11",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"NewPassword10\",\n    \"userpassword\":\"NewPassword11\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password again"
							},
							"response": []
						},
						{
							"name": "change-password-12",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"NewPassword11\",\n    \"userpassword\":\"NewPassword12\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password again"
							},
							"response": []
						},
						{
							"name": "change-password-13",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"NewPassword12\",\n    \"userpassword\":\"NewPassword13\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password again"
							},
							"response": []
						},
						{
							"name": "change-password-14",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"NewPassword13\",\n    \"userpassword\":\"NewPassword14\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password again"
							},
							"response": []
						},
						{
							"name": "change-password-1-after-history",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentpassword\":\"NewPassword14\",\n    \"userpassword\":\"NewPassword1\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}?_action=changePassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									],
									"query": [
										{
											"key": "_action",
											"value": "changePassword"
										}
									]
								},
								"description": "Change password to a previously used password not in history anymore"
							},
							"response": []
						},
						{
							"name": "emstecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{emstecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{emstecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/ems/users/{{testUserUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"ems",
										"users",
										"{{testUserUUID}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						}
					],
					"description": "Test if password policy applies correctly (CIAM-418)"
				},
				{
					"name": "emstecuser-auth-nonbrowser-user-agent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// clear cookies",
									"const jar = pm.cookies.jar();",
									"const url = pm.variables.get('url');",
									"jar.clear(url, function (err) {",
									"    if(err) {",
									"        console.error(err);",
									"    }",
									"    else {",
									"        console.log(\"cookies cleared!\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Has non-empty tokenId for root realm\", function () {",
									"    pm.expect(jsonData.tokenId).to.be.not.empty;",
									"    pm.expect(jsonData.realm).to.equal(\"/ems\");",
									"});",
									"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-OpenAM-Username",
								"value": "{{emstecuser_name}}",
								"type": "text"
							},
							{
								"key": "X-OpenAM-Password",
								"value": "{{emstecuser_password}}",
								"type": "text"
							},
							{
								"key": "Accept-API-Version",
								"value": "resource=2.0, protocol=1.0",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "user-manager",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{url}}/am/json/realms/root/realms/ems/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"am",
								"json",
								"realms",
								"root",
								"realms",
								"ems",
								"authenticate"
							]
						},
						"description": "Authenticate technical user"
					},
					"response": []
				}
			]
		},
		{
			"name": "DigitalFactory",
			"item": [
				{
					"name": "AuthN Enduser Zeropage",
					"item": [
						{
							"name": "dftecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/digitalfactory\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{dftecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{dftecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Login as technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/digitalfactory\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"loginName={{testUserUsername}},ou=users,ou=digitalfactory,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUsername}},ou=user,o=digitalfactory,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022!\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\":\"KuPo Automated Tests\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create a test user"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/digitalfactory\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022!",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Test a successful login"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-wrongpassword",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Unauthorized Response\", function () {",
											"    pm.expect(jsonData.code).to.equal(401);",
											"    pm.expect(jsonData.reason).to.equal(\"Unauthorized\");",
											"    pm.expect(jsonData.message).to.equal(\"Login failure\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo0815!",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Test login with wrong password"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-wrongpasspolicy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Unauthorized Response\", function () {",
											"    pm.expect(jsonData.code).to.equal(401);",
											"    pm.expect(jsonData.reason).to.equal(\"Unauthorized\");",
											"    pm.expect(jsonData.message).to.equal(\"Login failure\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "pass",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Test login with password too small for password policy"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-wrongpasspolicy2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Unauthorized Response\", function () {",
											"    pm.expect(jsonData.code).to.equal(401);",
											"    pm.expect(jsonData.reason).to.equal(\"Unauthorized\");",
											"    pm.expect(jsonData.message).to.equal(\"Login failure\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "passsssssssss",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Test login with password not matching all password policy criteria"
							},
							"response": []
						},
						{
							"name": "dftecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/digitalfactory\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{dftecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{dftecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Login with technical user"
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users/{{testUserUsername}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users",
										"{{testUserUsername}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						}
					],
					"description": "Test if zeropage login (login via header) is working in general."
				},
				{
					"name": "AuthN Enduser Tree",
					"item": [
						{
							"name": "dftecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/digitalfactory\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{dftecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{dftecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/digitalfactory\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"loginName={{testUserUsername}},ou=users,ou=digitalfactory,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUsername}},ou=user,o=digitalfactory,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022!\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\":\"KuPo Automated Tests\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create test user"
							},
							"response": []
						},
						{
							"name": "Init",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"authId returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('authId');",
											"    pm.environment.set(\"signin-authid\", jsonData.authId);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Returns right callbacks\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.callbacks[0].type).to.eql(\"NameCallback\");",
											"    pm.expect(jsonData.callbacks[1].type).to.eql(\"PasswordCallback\");",
											"    pm.expect(jsonData.callbacks.length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Initialize tree to get callbacks"
							},
							"response": []
						},
						{
							"name": "Username-Password-enter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/digitalfactory\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{signin-authid}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{testUserUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"Ergo2022!\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Enter username and password in callbacks"
							},
							"response": []
						},
						{
							"name": "dftecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/digitalfactory\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{dftecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{dftecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users/{{testUserUsername}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users",
										"{{testUserUsername}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						}
					],
					"description": "Test if login using interactive tree is working"
				},
				{
					"name": "AuthN Enduser Lock User",
					"item": [
						{
							"name": "dftecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/digitalfactory\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{dftecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{dftecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/digitalfactory\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"loginName={{testUserUsername}},ou=users,ou=digitalfactory,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUsername}},ou=user,o=digitalfactory,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022!\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\":\"KuPo Automated Tests\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create test user"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/digitalfactory\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022!",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Make sure test user can login"
							},
							"response": []
						},
						{
							"name": "dftecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/digitalfactory\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{dftecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{dftecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "lock-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/digitalfactory\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"loginName={{testUserUsername}},ou=users,ou=digitalfactory,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUsername}},ou=user,o=digitalfactory,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Inactive\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "if-match",
										"value": "*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountLocked\":\"true\",\n    \"accountLockout\":\"0\",\n    \"inetUserStatus\":\"Inactive\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users/{{testUserUsername}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users",
										"{{testUserUsername}}"
									]
								},
								"description": "Lock test user"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-locked",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Unauthorized Response\", function () {",
											"    pm.expect(jsonData.code).to.equal(401);",
											"    pm.expect(jsonData.reason).to.equal(\"Unauthorized\");",
											"    pm.expect(jsonData.message).to.equal(\"User Locked Out.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022!",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Verify test user cannot authenticate anymore and proper response is returned"
							},
							"response": []
						},
						{
							"name": "dftecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/digitalfactory\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{dftecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{dftecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "unlock-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/digitalfactory\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"loginName={{testUserUsername}},ou=users,ou=digitalfactory,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUsername}},ou=user,o=digitalfactory,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept-api-version",
										"value": "protocol=2.0,resource=4.0"
									},
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "if-match",
										"value": "*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountLocked\":\"false\",\n    \"accountLockout\":\"0\",\n    \"inetUserStatus\":\"Active\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users/{{testUserUsername}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users",
										"{{testUserUsername}}"
									]
								},
								"description": "Unlock test user"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-success-again",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/digitalfactory\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022!",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Verify test user can login again"
							},
							"response": []
						},
						{
							"name": "dftecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/digitalfactory\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{dftecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{dftecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users/{{testUserUsername}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users",
										"{{testUserUsername}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						}
					],
					"description": "Test if user can be locked and is not able to login after that. Same for unlocking."
				},
				{
					"name": "REST API Enduser",
					"item": [
						{
							"name": "dftecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/digitalfactory\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{dftecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{dftecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/digitalfactory\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"loginName={{testUserUsername}},ou=users,ou=digitalfactory,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUsername}},ou=user,o=digitalfactory,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022!\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\":\"KuPo Automated Tests\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create test user"
							},
							"response": []
						},
						{
							"name": "get-test-user-by-loginname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resultCount).to.eql(1);",
											"    pm.expect(jsonData.pagedResultsCookie).to.be.null;",
											"    pm.expect(jsonData.totalPagedResultsPolicy).to.eql(\"NONE\");",
											"    pm.expect(jsonData.totalPagedResults).to.eql(-1);",
											"    pm.expect(jsonData.remainingPagedResults).to.eql(0);",
											"    pm.expect(jsonData.result[0].realm).to.eql(\"/digitalfactory\");",
											"    pm.expect(jsonData.result[0].mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.result[0].username).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.result[0].givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.result[0].sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.result[0].origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.result[0].dn[0]).to.eql(pm.variables.replaceIn(\"loginName={{testUserUsername}},ou=users,ou=digitalfactory,ou=identities\"));",
											"    pm.expect(jsonData.result[0].cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.result[0].universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUsername}},ou=user,o=digitalfactory,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.result[0].loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.result[0].inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "digitalfactory",
										"value": "Kz-Xl9QAWaVnDAXHURUrbP1beqM.*AAJTSQACMDIAAlNLABxHdVA1MFRKbERmbVU3MkFCL1cvYm0wcFJQeHc9AAR0eXBlAANDVFMAAlMxAAIwMQ..*",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users?_queryFilter=loginName eq \"{{testUserUsername}}\"",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users"
									],
									"query": [
										{
											"key": "_queryFilter",
											"value": "loginName eq \"{{testUserUsername}}\""
										}
									]
								},
								"description": "get test user by its loginName"
							},
							"response": []
						},
						{
							"name": "get-users-by-mail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resultCount).to.be.gte(1);",
											"    pm.expect(jsonData.pagedResultsCookie).to.be.null;",
											"    pm.expect(jsonData.totalPagedResultsPolicy).to.eql(\"NONE\");",
											"    pm.expect(jsonData.totalPagedResults).to.eql(-1);",
											"    pm.expect(jsonData.remainingPagedResults).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "digitalfactory",
										"value": "Kz-Xl9QAWaVnDAXHURUrbP1beqM.*AAJTSQACMDIAAlNLABxHdVA1MFRKbERmbVU3MkFCL1cvYm0wcFJQeHc9AAR0eXBlAANDVFMAAlMxAAIwMQ..*",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users?_queryFilter=mail%20co%20%22@icconsult.33mail.com%22",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users"
									],
									"query": [
										{
											"key": "_queryFilter",
											"value": "mail%20co%20%22@icconsult.33mail.com%22"
										}
									]
								},
								"description": "Get all users"
							},
							"response": []
						},
						{
							"name": "get-user-by-uuid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/digitalfactory\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"loginName={{testUserUsername}},ou=users,ou=digitalfactory,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUsername}},ou=user,o=digitalfactory,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "digitalfactory",
										"value": "Kz-Xl9QAWaVnDAXHURUrbP1beqM.*AAJTSQACMDIAAlNLABxHdVA1MFRKbERmbVU3MkFCL1cvYm0wcFJQeHc9AAR0eXBlAANDVFMAAlMxAAIwMQ..*",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users/{{testUserUsername}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users",
										"{{testUserUsername}}"
									]
								},
								"description": "Get test user by its UUID"
							},
							"response": []
						},
						{
							"name": "test-user-auth-zeropage-success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/digitalfactory\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{testUserUsername}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "Ergo2022!",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Authenticate user"
							},
							"response": []
						},
						{
							"name": "get-own-user-by-uuid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/digitalfactory\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.roles[0]).to.eql(\"ui-self-service-user\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "digitalfactory",
										"value": "Kz-Xl9QAWaVnDAXHURUrbP1beqM.*AAJTSQACMDIAAlNLABxHdVA1MFRKbERmbVU3MkFCL1cvYm0wcFJQeHc9AAR0eXBlAANDVFMAAlMxAAIwMQ..*",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users/{{testUserUsername}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users",
										"{{testUserUsername}}"
									]
								},
								"description": "Get own user by UUID"
							},
							"response": []
						},
						{
							"name": "dftecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/digitalfactory\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{dftecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{dftecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users/{{testUserUsername}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users",
										"{{testUserUsername}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						},
						{
							"name": "get-user-by-uuid-after-deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(404);",
											"    pm.expect(jsonData.reason).to.eql(\"Not Found\");",
											"    pm.expect(jsonData.message).to.eql(\"Resource cannot be found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "digitalfactory",
										"value": "Kz-Xl9QAWaVnDAXHURUrbP1beqM.*AAJTSQACMDIAAlNLABxHdVA1MFRKbERmbVU3MkFCL1cvYm0wcFJQeHc9AAR0eXBlAANDVFMAAlMxAAIwMQ..*",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users/{{testUserUsername}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users",
										"{{testUserUsername}}"
									]
								},
								"description": "Try to get test user after deletion"
							},
							"response": []
						}
					],
					"description": "Test AM user REST APIs"
				},
				{
					"name": "OIDC",
					"item": [
						{
							"name": "OIDC-wellknown-endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"request_parameter_supported\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"introspection_signing_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"introspection_encryption_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"claims_parameter_supported\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"introspection_endpoint\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"check_session_iframe\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"scopes_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"backchannel_logout_supported\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"issuer\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"id_token_encryption_enc_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"acr_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"items\": {}",
											"      }",
											"    },",
											"    \"userinfo_encryption_enc_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"authorization_endpoint\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"request_object_encryption_enc_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"introspection_encryption_enc_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"rcs_request_encryption_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"claims_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"userinfo_signing_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"rcs_request_signing_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"token_endpoint_auth_methods_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"tls_client_certificate_bound_access_tokens\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"backchannel_logout_session_supported\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"token_endpoint\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"response_types_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"revocation_endpoint_auth_methods_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"request_uri_parameter_supported\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"rcs_response_encryption_enc_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"userinfo_encryption_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"grant_types_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"end_session_endpoint\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"rcs_request_encryption_enc_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"revocation_endpoint\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"version\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"rcs_response_encryption_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"userinfo_endpoint\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"token_endpoint_auth_signing_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"require_request_uri_registration\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"id_token_encryption_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"jwks_uri\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"subject_types_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"id_token_signing_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"registration_endpoint\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"request_object_signing_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"request_object_encryption_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"rcs_response_signing_alg_values_supported\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"request_parameter_supported\",",
											"    \"introspection_signing_alg_values_supported\",",
											"    \"introspection_encryption_alg_values_supported\",",
											"    \"claims_parameter_supported\",",
											"    \"introspection_endpoint\",",
											"    \"check_session_iframe\",",
											"    \"scopes_supported\",",
											"    \"backchannel_logout_supported\",",
											"    \"issuer\",",
											"    \"id_token_encryption_enc_values_supported\",",
											"    \"acr_values_supported\",",
											"    \"userinfo_encryption_enc_values_supported\",",
											"    \"authorization_endpoint\",",
											"    \"request_object_encryption_enc_values_supported\",",
											"    \"introspection_encryption_enc_values_supported\",",
											"    \"rcs_request_encryption_alg_values_supported\",",
											"    \"claims_supported\",",
											"    \"userinfo_signing_alg_values_supported\",",
											"    \"rcs_request_signing_alg_values_supported\",",
											"    \"token_endpoint_auth_methods_supported\",",
											"    \"tls_client_certificate_bound_access_tokens\",",
											"    \"backchannel_logout_session_supported\",",
											"    \"token_endpoint\",",
											"    \"response_types_supported\",",
											"    \"revocation_endpoint_auth_methods_supported\",",
											"    \"request_uri_parameter_supported\",",
											"    \"rcs_response_encryption_enc_values_supported\",",
											"    \"userinfo_encryption_alg_values_supported\",",
											"    \"grant_types_supported\",",
											"    \"end_session_endpoint\",",
											"    \"rcs_request_encryption_enc_values_supported\",",
											"    \"revocation_endpoint\",",
											"    \"version\",",
											"    \"rcs_response_encryption_alg_values_supported\",",
											"    \"userinfo_endpoint\",",
											"    \"token_endpoint_auth_signing_alg_values_supported\",",
											"    \"require_request_uri_registration\",",
											"    \"id_token_encryption_alg_values_supported\",",
											"    \"jwks_uri\",",
											"    \"subject_types_supported\",",
											"    \"id_token_signing_alg_values_supported\",",
											"    \"registration_endpoint\",",
											"    \"request_object_signing_alg_values_supported\",",
											"    \"request_object_encryption_alg_values_supported\",",
											"    \"rcs_response_signing_alg_values_supported\"",
											"  ]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/am/oauth2/realms/root/realms/digitalfactory/.well-known/openid-configuration",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										".well-known",
										"openid-configuration"
									]
								},
								"description": "Get OIDC configuration"
							},
							"response": []
						}
					]
				},
				{
					"name": "DFO 409 issue",
					"item": [
						{
							"name": "dftecuser-auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear cookies",
											"const jar = pm.cookies.jar();",
											"const url = pm.variables.get('url');",
											"jar.clear(url, function (err) {",
											"    if(err) {",
											"        console.error(err);",
											"    }",
											"    else {",
											"        console.log(\"cookies cleared!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Has non-empty tokenId for root realm\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.not.empty;",
											"    pm.expect(jsonData.realm).to.equal(\"/digitalfactory\");",
											"});",
											"pm.environment.set(\"amadmin-session\", jsonData.tokenId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{dftecuser_name}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{dftecuser_password}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"authenticate"
									]
								},
								"description": "Authenticate technical user"
							},
							"response": []
						},
						{
							"name": "create-test-user-first",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testUserUUID\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"pm.collectionVariables.set(\"testUserUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.collectionVariables.set(\"testUserEmail\", pm.variables.replaceIn(\"ergotest-{{$timestamp}}@icconsult.33mail.com\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.realm).to.eql(\"/digitalfactory\");",
											"    pm.expect(jsonData.mail[0]).to.eql(pm.variables.replaceIn(\"{{testUserEmail}}\"));",
											"    pm.expect(jsonData.username).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.givenName[0]).to.eql(\"Ergo\");",
											"    pm.expect(jsonData.sn[0]).to.eql(\"User\");",
											"    pm.expect(jsonData.origin[0]).to.eql(\"KuPo Automated Tests\");",
											"    pm.expect(jsonData.dn[0]).to.eql(pm.variables.replaceIn(\"loginName={{testUserUsername}},ou=users,ou=digitalfactory,ou=identities\"));",
											"    pm.expect(jsonData.cn[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.universalid[0]).to.eql(pm.variables.replaceIn(\"id={{testUserUsername}},ou=user,o=digitalfactory,ou=services,ou=am-config\"));",
											"    pm.expect(jsonData.loginName[0]).to.eql(pm.variables.replaceIn(\"{{testUserUsername}}\"));",
											"    pm.expect(jsonData.inetUserStatus[0]).to.eql(\"Active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022!\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\":\"KuPo Automated Tests\",\n    \"dfKNR\":\"testKNR1\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create-test-user-repeat",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{testUserUsername}}\",\n    \"userpassword\": \"Ergo2022!\",\n    \"mail\": \"{{testUserEmail}}\",\n    \"givenName\":\"Ergo\",\n    \"sn\":\"User\",\n    \"origin\":\"KuPo Automated Tests\",\n    \"dfKNR\":\"testKNR1\"\n}"
								},
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users/?_action=create",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get-all-users-by-dfKNR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Right values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resultCount).to.be.gte(1);",
											"    pm.expect(jsonData.pagedResultsCookie).to.be.null;",
											"    pm.expect(jsonData.totalPagedResultsPolicy).to.eql(\"NONE\");",
											"    pm.expect(jsonData.totalPagedResults).to.eql(-1);",
											"    pm.expect(jsonData.remainingPagedResults).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=1.0,resource=3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "digitalfactory",
										"value": "Kz-Xl9QAWaVnDAXHURUrbP1beqM.*AAJTSQACMDIAAlNLABxHdVA1MFRKbERmbVU3MkFCL1cvYm0wcFJQeHc9AAR0eXBlAANDVFMAAlMxAAIwMQ..*",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users?_queryFilter=dfKNR+co+'testKNR1'",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users"
									],
									"query": [
										{
											"key": "_queryFilter",
											"value": "dfKNR+co+'testKNR1'"
										}
									]
								},
								"description": "Get all users"
							},
							"response": []
						},
						{
							"name": "delete-test-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test successful values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success, \"sucess\").to.eql(\"true\");",
											"    pm.expect(jsonData._id, \"ID\").to.not.be.empty;",
											"    pm.expect(jsonData._rev, \"Revision\").to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "protocol=2.1,resource=3.0"
									}
								],
								"url": {
									"raw": "{{url}}/am/json/realms/root/realms/digitalfactory/users/{{testUserUsername}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"digitalfactory",
										"users",
										"{{testUserUsername}}"
									]
								},
								"description": "Delete test user"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "SSO API",
			"item": [
				{
					"name": "Liveness Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body says 'healthy'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"healthy\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/sso/health/live",
							"host": [
								"{{url}}"
							],
							"path": [
								"sso",
								"health",
								"live"
							]
						}
					},
					"response": []
				},
				{
					"name": "Readiness Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body says 'healthy'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"healthy\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/sso/health/ready",
							"host": [
								"{{url}}"
							],
							"path": [
								"sso",
								"health",
								"ready"
							]
						}
					},
					"response": []
				},
				{
					"name": "Init journey - invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/sso/dkvinit/nonexistingrealm?authIndexType=service&authIndexValue=dkvapplogin&goto=https://kunde-s.notreal.ergo.de/meineversicherungen/lz/start.aspx?vu=dkv",
							"host": [
								"{{url}}"
							],
							"path": [
								"sso",
								"dkvinit",
								"nonexistingrealm"
							],
							"query": [
								{
									"key": "authIndexType",
									"value": "service"
								},
								{
									"key": "authIndexValue",
									"value": "dkvapplogin"
								},
								{
									"key": "goto",
									"value": "https://kunde-s.notreal.ergo.de/meineversicherungen/lz/start.aspx?vu=dkv"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Init KUPO journey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// save item ID in collection variable",
									"const loc = pm.response.headers.get('location');",
									"const querystring = require('querystring');",
									"const paramsIndex = loc.indexOf('?');",
									"const queryparams = querystring.parse(loc.substr(paramsIndex + 1))",
									"if (queryparams && queryparams.state) {",
									"    pm.collectionVariables.set('reentry', queryparams.state);",
									"}",
									"",
									"// perform tests",
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Response has a valid 'location'\", function () {",
									"    pm.expect(loc).to.be.a('string').and.satisfy(l => ",
									"        l.startsWith('https://idbroker.dkv') &&",
									"        l.includes('state=') &&",
									"        /redirect_uri=https:\\/\\/ciam[^\\/]+\\/am\\?realm%3D\\/customerportal/.test(l)",
									"    );",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/sso/dkvinit/customerportal?authIndexType=service&authIndexValue=dkvapplogin&goto=https://kunde-s.notreal.ergo.de/meineversicherungen/lz/start.aspx?vu=dkv",
							"host": [
								"{{url}}"
							],
							"path": [
								"sso",
								"dkvinit",
								"customerportal"
							],
							"query": [
								{
									"key": "authIndexType",
									"value": "service"
								},
								{
									"key": "authIndexValue",
									"value": "dkvapplogin"
								},
								{
									"key": "goto",
									"value": "https://kunde-s.notreal.ergo.de/meineversicherungen/lz/start.aspx?vu=dkv"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get reentry cache - valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response body has 'item'\", function () {",
									"    pm.expect(jsonData).to.haveOwnProperty('item');",
									"    pm.expect(jsonData.item).to.haveOwnProperty('data');",
									"});",
									"",
									"pm.test(\"Response body has 'timestamp' & 'ttl\", function () {",
									"    pm.expect(jsonData.item).to.haveOwnProperty('ttl');",
									"    pm.expect(jsonData.item.ttl).to.be.a('number');",
									"    pm.expect(jsonData.item).to.haveOwnProperty('timestamp');",
									"    pm.expect(jsonData.item.timestamp).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response body has valid 'realm'\", function () {",
									"    pm.expect(jsonData.item.realm).to.equal('customerportal');",
									"});",
									"",
									"pm.test(\"Response body has valid 'data'\", function () {",
									"    pm.expect(jsonData.item).to.haveOwnProperty('data');",
									"    pm.expect(jsonData.item.data).to.haveOwnProperty('callbacks');",
									"    pm.expect(jsonData.item.data).to.haveOwnProperty('authId');",
									"    pm.expect(jsonData.item.data.authId).to.be.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/sso/resume/{{reentry}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"sso",
								"resume",
								"{{reentry}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get reentry cache - invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/sso/resume/this-ID-definitely-does-not-exist",
							"host": [
								"{{url}}"
							],
							"path": [
								"sso",
								"resume",
								"this-ID-definitely-does-not-exist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Init DFO journey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// save item ID in collection variable",
									"const loc = pm.response.headers.get('location');",
									"const querystring = require('querystring');",
									"const paramsIndex = loc.indexOf('?');",
									"const queryparams = querystring.parse(loc.substr(paramsIndex + 1))",
									"if (queryparams && queryparams.state) {",
									"    pm.collectionVariables.set('reentry', queryparams.state);",
									"}",
									"",
									"// perform tests",
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Response has a valid 'location'\", function () {",
									"    pm.expect(loc).to.be.a('string').and.satisfy(l => ",
									"        l.startsWith('https://idbroker.dkv') &&",
									"        l.includes('state=') &&",
									"        /redirect_uri=https:\\/\\/ciam[^\\/]+\\/am/.test(l)",
									"    );",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/sso/dkvinit/digitalfactory?authIndexType=service&authIndexValue=dkvapplogin&goto=https://kunde-s.notreal.ergo.de/meineversicherungen/lz/start.aspx?vu=dkv",
							"host": [
								"{{url}}"
							],
							"path": [
								"sso",
								"dkvinit",
								"digitalfactory"
							],
							"query": [
								{
									"key": "authIndexType",
									"value": "service"
								},
								{
									"key": "authIndexValue",
									"value": "dkvapplogin"
								},
								{
									"key": "goto",
									"value": "https://kunde-s.notreal.ergo.de/meineversicherungen/lz/start.aspx?vu=dkv"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get DFO reentry cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response body has 'item'\", function () {",
									"    pm.expect(jsonData).to.haveOwnProperty('item');",
									"    pm.expect(jsonData.item).to.haveOwnProperty('data');",
									"});",
									"",
									"pm.test(\"Response body has 'timestamp' & 'ttl\", function () {",
									"    pm.expect(jsonData.item).to.haveOwnProperty('ttl');",
									"    pm.expect(jsonData.item.ttl).to.be.a('number');",
									"    pm.expect(jsonData.item).to.haveOwnProperty('timestamp');",
									"    pm.expect(jsonData.item.timestamp).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response body has valid 'realm'\", function () {",
									"    pm.expect(jsonData.item.realm).to.equal('digitalfactory');",
									"});",
									"",
									"pm.test(\"Response body has valid 'data'\", function () {",
									"    pm.expect(jsonData.item).to.haveOwnProperty('data');",
									"    pm.expect(jsonData.item.data).to.haveOwnProperty('callbacks');",
									"    pm.expect(jsonData.item.data).to.haveOwnProperty('authId');",
									"    pm.expect(jsonData.item.data.authId).to.be.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/sso/resume/{{reentry}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"sso",
								"resume",
								"{{reentry}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Tests the SSO cache API responses.\n\nThe API was originally implemented to enable the ePA SSO journeys, for details refer to: [https://confluence.itergo.com/x/8fNdGw](https://confluence.itergo.com/x/8fNdGw)"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "testUserUUID",
			"value": ""
		},
		{
			"key": "testUserUsername",
			"value": ""
		},
		{
			"key": "testUserEmail",
			"value": ""
		},
		{
			"key": "reentry",
			"value": ""
		}
	]
}